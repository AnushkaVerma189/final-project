/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-09-25 13:51:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.userPages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import java.lang.*;
import dao.Question;

public final class liveTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.lang");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("dao.Question");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <title>Live Test</title>\n");
      out.write("  <style>\n");
      out.write("    body {\n");
      out.write("      font-family: Arial, sans-serif;\n");
      out.write("      margin: 0;\n");
      out.write("      margin-top: 50px;\n");
      out.write("      padding: 0;\n");
      out.write("      background-color: #f5f5f5;\n");
      out.write("      display: flex;\n");
      out.write("      justify-content: center;\n");
      out.write("    }\n");
      out.write("    #countdown {\n");
      out.write("  position: absolute;\n");
      out.write("  top: 15px; /* Adjust as needed */\n");
      out.write("  left: 50%;\n");
      out.write("  transform: translateX(-50%);\n");
      out.write("  text-align: center;\n");
      out.write("  font-size: 24px;\n");
      out.write("  padding: 5px;\n");
      out.write("  margin-bottom: 15px;\n");
      out.write("  background-color: #8080ff;\n");
      out.write("  color: white;\n");
      out.write("  border-radius: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("    .container {\n");
      out.write("      display: flex;\n");
      out.write("      flex-direction: row;\n");
      out.write("      width: 95%;\n");
      out.write("      height: 87vh;\n");
      out.write("      background-color: #fff;\n");
      out.write("      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n");
      out.write("      border-radius: 5px;\n");
      out.write("      overflow: hidden;\n");
      out.write("      position: relative;\n");
      out.write("    }\n");
      out.write("    .question-section {\n");
      out.write("      flex: 4;\n");
      out.write("      padding: 20px;\n");
      out.write("      font-size: 20px;\n");
      out.write("      display: flex;\n");
      out.write("      flex-direction: column;\n");
      out.write("      justify-content: space-between;\n");
      out.write("    }\n");
      out.write("    .question-item {\n");
      out.write("      margin-bottom: 15px;\n");
      out.write("    }\n");
      out.write("    .question-item h3 {\n");
      out.write("      margin-top: 0;\n");
      out.write("      color: #333;\n");
      out.write("    }\n");
      out.write("    .options {\n");
      out.write("      list-style-type: none;\n");
      out.write("      padding: 0;\n");
      out.write("      margin: 10px 0;\n");
      out.write("    }\n");
      out.write("    .options li {\n");
      out.write("      margin-bottom: 5px;\n");
      out.write("    }\n");
      out.write("    .options label {\n");
      out.write("      display: flex;\n");
      out.write("      align-items: center;\n");
      out.write("    }\n");
      out.write("    .options input[type=\"radio\"] {\n");
      out.write("      margin-right: 10px;\n");
      out.write("    }\n");
      out.write("    .buttons-section {\n");
      out.write("      display: flex;\n");
      out.write("      justify-content: center;\n");
      out.write("      margin-top: 20px;\n");
      out.write("    }\n");
      out.write("    button {\n");
      out.write("      padding: 10px 20px;\n");
      out.write("      background-color: #4CAF50;\n");
      out.write("      color: white;\n");
      out.write("      border: none;\n");
      out.write("      border-radius: 5px;\n");
      out.write("      cursor: pointer;\n");
      out.write("      transition: background-color 0.3s ease;\n");
      out.write("      margin-right: 10px;\n");
      out.write("    }\n");
      out.write("    button:hover {\n");
      out.write("      background-color: #3e8e41;\n");
      out.write("    }\n");
      out.write("    button:disabled {\n");
      out.write("      background-color: #ccc;\n");
      out.write("      cursor: not-allowed;\n");
      out.write("    }\n");
      out.write("    #submitButton {\n");
      out.write("      background-color: #f44336;\n");
      out.write("    }\n");
      out.write("    #submitButton:hover {\n");
      out.write("      background-color: #d32f2f;\n");
      out.write("    }\n");
      out.write("    .question-nav {\n");
      out.write("      flex: 1;\n");
      out.write("      background-color: #9a9a9a;\n");
      out.write("      padding: 20px;\n");
      out.write("    }\n");
      out.write("    .question-nav ul {\n");
      out.write("      list-style-type: none;\n");
      out.write("      padding: 0;\n");
      out.write("      margin: 0;\n");
      out.write("    }\n");
      out.write("    .question-nav li {\n");
      out.write("      margin-bottom: 10px;\n");
      out.write("    }\n");
      out.write("    .question-nav a {\n");
      out.write("      display: block;\n");
      out.write("      padding: 10px;\n");
      out.write("      background-color: #fff;\n");
      out.write("      border-radius: 5px;\n");
      out.write("      text-decoration: none;\n");
      out.write("      color: #333;\n");
      out.write("      transition: background-color 0.3s ease;\n");
      out.write("    }\n");
      out.write("    .question-nav a.answered {\n");
      out.write("      background-color: #4CAF50;\n");
      out.write("      color: white;\n");
      out.write("    }\n");
      out.write("    .question-nav a.unattempted {\n");
      out.write("      background-color: #fff;\n");
      out.write("      color: black;\n");
      out.write("    }\n");
      out.write("    .question-nav a.marked-for-review {\n");
      out.write("      background-color: #6643b5 !important;\n");
      out.write("      color: white;\n");
      out.write("    }\n");
      out.write("    .question-nav a:hover {\n");
      out.write("      background-color: #e0e0e0;\n");
      out.write("    }\n");
      out.write("    #markForReviewButton:hover {\n");
      out.write("      background-color: #6643b5;\n");
      out.write("    }\n");
      out.write("    button {\n");
      out.write("      color: black;\n");
      out.write("    }\n");
      out.write("    .video-section {\n");
      out.write("      position: absolute;\n");
      out.write("      bottom: 0;\n");
      out.write("      right: 0;\n");
      out.write("      margin: 20px;\n");
      out.write("      border: 1px solid #ccc;\n");
      out.write("      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n");
      out.write("    }\n");
      out.write("    #videoElement {\n");
      out.write("      width: auto;\n");
      out.write("      height: 100px;\n");
      out.write("    } \n");
      out.write("	\n");
      out.write("	#fullscreen-modal {\n");
      out.write("    display: none;\n");
      out.write("    position: fixed;\n");
      out.write("    z-index: 1;\n");
      out.write("    left: 0;\n");
      out.write("    top: 0;\n");
      out.write("    width: 100%;\n");
      out.write("    height: 100%;\n");
      out.write("    background-color: rgba(255, 255, 255, 0.8); /* White background with transparency */\n");
      out.write("}\n");
      out.write("\n");
      out.write("	#fullscreen-modal {\n");
      out.write("		\n");
      out.write("		border-color: 5px solid black;\n");
      out.write("	    background-color: #f5f5f5; \n");
      out.write("	    padding: 20px;\n");
      out.write("	    border-radius: 10px;\n");
      out.write("	    width: 100%;\n");
      out.write("	    height: 100vh;\n");
      out.write("	    text-align: center;\n");
      out.write("	    justigy-content: center;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#fullscreen-modal h2 {\n");
      out.write("	    color: #333; /* Dark gray text */\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#fullscreen-modal p {\n");
      out.write("	    color: #666; /* Medium gray text */\n");
      out.write("	    margin-bottom: 20px;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#fullscreen-modal .buttons {\n");
      out.write("	    display: flex;\n");
      out.write("	    justify-content: center;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#fullscreen-modal .buttons button {\n");
      out.write("	    padding: 10px 20px;\n");
      out.write("	    margin: 0 10px;\n");
      out.write("	    border: none;\n");
      out.write("	    border-radius: 5px;\n");
      out.write("	    cursor: pointer;\n");
      out.write("	    transition: background-color 0.3s ease;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#fullscreen-modal .buttons button:hover {\n");
      out.write("	    background-color: #f5b700; /* Light orange on hover */\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#fullscreen-modal .buttons button#enter-fullscreen-button {\n");
      out.write("	    background-color: #5c5470; /* Green button */\n");
      out.write("	    color: #fff; /* White text */\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	#fullscreen-modal .buttons button#back-button {\n");
      out.write("	    background-color: #f44336; /* Red button */\n");
      out.write("	    color: #fff; /* White text */\n");
      out.write("	}\n");
      out.write("    \n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("  ");
 HttpSession session2 = request.getSession(false);
  if (session2 != null && session2.getAttribute("user_id") != null) { 
      out.write("\n");
      out.write("	<div id=\"countdown\">\n");
      out.write("    <span id=\"minutes\">00</span>:<span id=\"seconds\">00</span>\n");
      out.write("  </div> \n");
      out.write("  <div class=\"container\">\n");
      out.write("	  \n");
      out.write("    <div class=\"question-section\">\n");
      out.write("      ");
 ArrayList<Question> questions = (ArrayList<Question>) session.getAttribute("questions");
      if (questions != null) { 
      out.write("\n");
      out.write("      <div class=\"question-item\">\n");
      out.write("        <h3>Question <span id=\"questionNumber\"></span>:</h3>\n");
      out.write("        <p><span id=\"questionText\"></span></p>\n");
      out.write("        <ul class=\"options\" id=\"optionsList\">\n");
      out.write("          <!-- Options will be dynamically populated here -->\n");
      out.write("        </ul>\n");
      out.write("      </div>\n");
      out.write("      <div class=\"buttons-section\">\n");
      out.write("        <button id=\"prevButton\" disabled>Previous</button>\n");
      out.write("        <button id=\"nextButton\">Next</button>\n");
      out.write("        <button id=\"markForReviewButton\" style=\"background-color: #8080ff\">Mark for Review</button>\n");
      out.write("        <button id=\"submitButton\" style=\"display: none; color: white;\">Submit Test</button>\n");
      out.write("      </div>\n");
      out.write("      ");
 } 
      out.write("\n");
      out.write("    </div>\n");
      out.write("    <!-- Video capturing section -->\n");
      out.write("    <div class=\"video-section\">\n");
      out.write("      <video id=\"videoElement\" autoplay></video>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"question-nav\">\n");
      out.write("      <h2 style=\"color: white;\">Questions</h2>\n");
      out.write("      <ul>\n");
      out.write("        ");
 for (int i = 0; i < questions.size(); i++) { 
      out.write("\n");
      out.write("        <li>\n");
      out.write("          <a href=\"#\" class=\"unattempted\" data-question-index=\"");
      out.print(i);
      out.write("\">\n");
      out.write("            Question ");
      out.print(i + 1);
      out.write("\n");
      out.write("          </a>\n");
      out.write("        </li>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("      </ul>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("  \n");
      out.write("  <script>\n");
      out.write("  \n");
      out.write("\n");
      out.write("  // full screen mode --------------------------------------------------------------------------------\n");
      out.write("  \n");
      out.write("  // no. of times screen changed\n");
      out.write("  var count = 0;\n");
      out.write("  \n");
      out.write("  document.addEventListener(\"DOMContentLoaded\", function() {\n");
      out.write("      const fullscreenModal = document.getElementById('fullscreen-modal');\n");
      out.write("      const enterFullscreenButton = document.getElementById('enter-fullscreen-button');\n");
      out.write("      const backButton = document.getElementById('back-button');\n");
      out.write("\n");
      out.write("     // fullscreenModal.classList.remove('hidden');\n");
      out.write("      fullscreenModal.style.display = \"block\";\n");
      out.write("      \n");
      out.write("      enterFullscreenButton.addEventListener('click', () => {\n");
      out.write("          enterFullscreen();\n");
      out.write("          showQuestion(currentQuestionIndex);\n");
      out.write("          if (!startTime) {\n");
      out.write("              startTime = Date.now(); // Get the current timestamp\n");
      out.write("              startTimer();\n");
      out.write("          }\n");
      out.write("      });\n");
      out.write("\n");
      out.write("      backButton.addEventListener('click', () => {\n");
      out.write("          window.location.href = \"/TakeTest/UserDashboard\";\n");
      out.write("      });\n");
      out.write("      \n");
      out.write("      // Function to enter fullscreen mode\n");
      out.write("      function enterFullscreen() {\n");
      out.write("          if (document.documentElement.requestFullscreen) {\n");
      out.write("              document.documentElement.requestFullscreen();\n");
      out.write("          } else if (document.documentElement.webkitRequestFullscreen) {\n");
      out.write("              document.documentElement.webkitRequestFullscreen();\n");
      out.write("          } else if (document.documentElement.mozRequestFullScreen) {\n");
      out.write("              document.documentElement.mozRequestFullScreen();\n");
      out.write("          }\n");
      out.write("          fullscreenModal.style.display = \"none\";\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("  });\n");
      out.write("  \n");
      out.write("  let isWindowFocused = true;\n");
      out.write("  let switchTimeout;\n");
      out.write("\n");
      out.write("  function handleWindowBlur() {\n");
      out.write("      if (isWindowFocused) {\n");
      out.write("          // Window lost focus (switched to another application or tab)\n");
      out.write("          isWindowFocused = false;\n");
      out.write("          switchTimeout = setTimeout(() => {\n");
      out.write("              count++; // Increment the switch count after a delay\n");
      out.write("              console.log('Tab switched! Count: ' + count);\n");
      out.write("          }, 100); // Adjust the delay as needed\n");
      out.write("      }\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function handleWindowFocus() {\n");
      out.write("      if (!isWindowFocused) {\n");
      out.write("          // Window regained focus (returned to the application)\n");
      out.write("          isWindowFocused = true;\n");
      out.write("          if (switchTimeout) {\n");
      out.write("              clearTimeout(switchTimeout); // Cancel the switch timeout\n");
      out.write("          }\n");
      out.write("      }\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  // Listen for window blur and focus events\n");
      out.write("  window.addEventListener('blur', handleWindowBlur);\n");
      out.write("  window.addEventListener('focus', handleWindowFocus);\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  document.addEventListener('fullscreenchange', (event) => {\n");
      out.write("	  \n");
      out.write("	  console.log(count);\n");
      out.write("	  if (!document.fullscreenElement) {\n");
      out.write("		  count++;\n");
      out.write("	    const modal = document.getElementById('fullscreen-modal');\n");
      out.write("	    if (modal) {\n");
      out.write("	      modal.style.display = 'block'; // Show the modal\n");
      out.write("	      const abc = document.getElementById('enter-fullscreen-button');\n");
      out.write("	      abc.addEventListener('click', () => {\n");
      out.write("	          mn();\n");
      out.write("	      });\n");
      out.write("	      function mn() {\n");
      out.write("	          if (document.documentElement.requestFullscreen) {\n");
      out.write("	              document.documentElement.requestFullscreen();\n");
      out.write("	          } else if (document.documentElement.webkitRequestFullscreen) {\n");
      out.write("	              document.documentElement.webkitRequestFullscreen();\n");
      out.write("	          } else if (document.documentElement.mozRequestFullScreen) {\n");
      out.write("	              document.documentElement.mozRequestFullScreen();\n");
      out.write("	          }\n");
      out.write("	          fullscreenModal.style.display = \"none\";\n");
      out.write("	      }\n");
      out.write("	    } \n");
      out.write("	  }\n");
      out.write("	});\n");
      out.write("\n");
      out.write("\n");
      out.write("  // ------ webcam access ------------------------------------------------------------------------------------\n");
      out.write("  \n");
      out.write("  const video = document.getElementById(\"videoElement\");\n");
      out.write("\n");
      out.write("  function requestCameraPermission() {\n");
      out.write("    \n");
      out.write("    navigator.mediaDevices.getUserMedia({ video: true })\n");
      out.write("      .then(function(stream) {\n");
      out.write("        // User granted permission\n");
      out.write("        startVideoCapture(stream);\n");
      out.write("      })\n");
      out.write("      .catch(function(error) {\n");
      out.write("        console.log(\"Error accessing webcam:\", error);\n");
      out.write("        const permissionDenied = confirm(\"Access to the camera is required. Give access and click 'Ok' to proceed or 'Cancel' to go back to Dashboard.\");\n");
      out.write("        if (permissionDenied) {\n");
      out.write("          // Repeatedly ask for permission until granted\n");
      out.write("          requestCameraPermission();\n");
      out.write("        } else {\n");
      out.write("          window.location.href = \"/TakeTest/UserDashboard\";\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n");
      out.write("    // Initial request for camera permission\n");
      out.write("    requestCameraPermission();\n");
      out.write("  } else {\n");
      out.write("    console.log(\"getUserMedia is not supported by this browser\");\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function startVideoCapture(stream) {\n");
      out.write("    video.srcObject = stream;\n");
      out.write("  }\n");
      out.write("  \n");
      out.write("  // questions \n");
      out.write("    const questionItems = document.querySelectorAll('.question-item');\n");
      out.write("    const questionLinks = document.querySelectorAll('.question-nav a');\n");
      out.write("    const prevButton = document.getElementById('prevButton');\n");
      out.write("    const nextButton = document.getElementById('nextButton');\n");
      out.write("    const markForReviewButton = document.getElementById('markForReviewButton');\n");
      out.write("    const submitButton = document.getElementById('submitButton');\n");
      out.write("    const questionNumberElement = document.getElementById('questionNumber');\n");
      out.write("    const questionTextElement = document.getElementById('questionText');\n");
      out.write("    const optionsListElement = document.getElementById('optionsList');\n");
      out.write("    const timerElement = document.getElementById('demo');\n");
      out.write("\n");
      out.write("    const questions = [\n");
      out.write("      ");
ArrayList<Question> arr = (ArrayList<Question>) session.getAttribute("questions");
      for (Question question : arr) {
      out.write("\n");
      out.write("      { text: '");
      out.print(question.getQuesText().replaceAll("'", "\\'"));
      out.write("', options: [\n");
      out.write("        '");
      out.print(question.getOption1().replaceAll("'", "\\'"));
      out.write("',\n");
      out.write("        '");
      out.print(question.getOption2().replaceAll("'", "\\'"));
      out.write("',\n");
      out.write("        '");
      out.print(question.getOption3().replaceAll("'", "\\'"));
      out.write("',\n");
      out.write("        '");
      out.print(question.getOption4().replaceAll("'", "\\'"));
      out.write("'\n");
      out.write("      ]},\n");
      out.write("      ");
}
      out.write("\n");
      out.write("    ];\n");
      out.write("	\n");
      out.write("    var startTime;\n");
      out.write("    let currentQuestionIndex = 0;\n");
      out.write("    const userResponses = new Array(questions.length).fill(null);\n");
      out.write("    const markedForReview = new Array(questions.length).fill(false);\n");
      out.write("\n");
      out.write("    const totalTime = questions.length * 1 * 300; // 5 minutes per question, in seconds\n");
      out.write("    let remainingTime = totalTime;\n");
      out.write("    let timerInterval;\n");
      out.write("\n");
      out.write("    function updateTimer() {\n");
      out.write("        const minutes = Math.floor(remainingTime / 60);\n");
      out.write("        const seconds = remainingTime % 60;\n");
      out.write("        const minutesText = minutes.toString().padStart(2, '0');\n");
      out.write("        const secondsText = seconds.toString().padStart(2, '0');\n");
      out.write("        document.getElementById('minutes').textContent = minutesText;\n");
      out.write("        document.getElementById('seconds').textContent = secondsText;\n");
      out.write("\n");
      out.write("        if (remainingTime === 30) {\n");
      out.write("            document.getElementById('countdown').style.backgroundColor = '#f44336';\n");
      out.write("        }\n");
      out.write("        if (remainingTime === 0) {\n");
      out.write("            submitTestOnTimeout();\n");
      out.write("        } else {\n");
      out.write("            remainingTime--;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function startTimer() {\n");
      out.write("      remainingTime = totalTime;\n");
      out.write("      timerInterval = setInterval(updateTimer, 1000);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showQuestion(index) {\n");
      out.write("      const question = questions[index];\n");
      out.write("      questionNumberElement.textContent = index + 1;\n");
      out.write("      questionTextElement.innerHTML = question.text;\n");
      out.write("      optionsListElement.innerHTML = '';\n");
      out.write("      question.options.forEach((option, optionIndex) => {\n");
      out.write("        const listItem = document.createElement('li');\n");
      out.write("        const label = document.createElement('label');\n");
      out.write("        const radio = document.createElement('input');\n");
      out.write("        radio.type = 'radio';\n");
      out.write("        radio.name = 'option';\n");
      out.write("        radio.value = optionIndex + 1;\n");
      out.write("        radio.addEventListener('change', () => {\n");
      out.write("          userResponses[index] = optionIndex + 1;\n");
      out.write("          updateQuestionLink(index, 'answered');\n");
      out.write("        });\n");
      out.write("        if (userResponses[index] === optionIndex + 1) {\n");
      out.write("          radio.checked = true;\n");
      out.write("        }\n");
      out.write("        label.appendChild(radio);\n");
      out.write("        label.appendChild(document.createTextNode(option));\n");
      out.write("        listItem.appendChild(label);\n");
      out.write("        optionsListElement.appendChild(listItem);\n");
      out.write("      });\n");
      out.write("      questionLinks.forEach((link, i) => {\n");
      out.write("        if (i === index) {\n");
      out.write("          link.classList.add('active');\n");
      out.write("        } else {\n");
      out.write("          link.classList.remove('active');\n");
      out.write("        }\n");
      out.write("        updateQuestionLink(i, markedForReview[i] ? 'marked-for-review' : userResponses[i] ? 'answered' : 'unattempted');\n");
      out.write("      });\n");
      out.write("      updateNavigationButtons();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function updateQuestionLink(index, status) {\n");
      out.write("      const link = questionLinks[index];\n");
      out.write("      link.classList.remove('unattempted', 'answered', 'marked-for-review');\n");
      out.write("      link.classList.add(status);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function updateNavigationButtons() {\n");
      out.write("      prevButton.disabled = currentQuestionIndex === 0;\n");
      out.write("      nextButton.disabled = currentQuestionIndex === questions.length - 1;\n");
      out.write("      submitButton.style.display = currentQuestionIndex === questions.length - 1 ? 'inline-block' : 'none';\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function markForReview() {\n");
      out.write("      const currentIndex = currentQuestionIndex;\n");
      out.write("      markedForReview[currentIndex] = !markedForReview[currentIndex];\n");
      out.write("      updateQuestionLink(currentIndex, markedForReview[currentIndex] ? 'marked-for-review' : userResponses[currentIndex] ? 'answered' : 'unattempted');\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    function submitTestOnTimeout() {\n");
      out.write("        const confirmSubmit = confirm('Time is up! Submit your test?');\n");
      out.write("        if (confirmSubmit) {\n");
      out.write("            clearInterval(timerInterval);\n");
      out.write("            document.removeEventListener('fullscreenchange', ()=>{\n");
      out.write("            	console.log(\"listener removed\");\n");
      out.write("            });\n");
      out.write("            \n");
      out.write("            const answersString = userResponses.join(',');\n");
      out.write("            const form = document.createElement('form');\n");
      out.write("            form.setAttribute('method', 'post');\n");
      out.write("            form.setAttribute('action', '/TakeTest/Result');\n");
      out.write("            \n");
      out.write("            const answersInput = document.createElement('input');\n");
      out.write("            answersInput.setAttribute('type', 'hidden');\n");
      out.write("            answersInput.setAttribute('name', 'answers');\n");
      out.write("            answersInput.setAttribute('value', answersString);\n");
      out.write("            \n");
      out.write("            const switches = document.createElement('input');\n");
      out.write("            switches.setAttribute('type', 'hidden');\n");
      out.write("            switches.setAttribute('name', 'tab_switch');\n");
      out.write("            switches.setAttribute('value', count);	\n");
      out.write("            \n");
      out.write("            form.appendChild(answersInput);\n");
      out.write("            form.appendChild(switches);\n");
      out.write("            document.body.appendChild(form);\n");
      out.write("            form.submit();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function submitTest() {\n");
      out.write("      const confirmSubmit = confirm('Do you want ... to submit the test?');\n");
      out.write("      if (confirmSubmit) {\n");
      out.write("        clearInterval(timerInterval);\n");
      out.write("        const answersString = userResponses.join(',');\n");
      out.write("        const form = document.createElement('form');\n");
      out.write("        form.setAttribute('method', 'post');\n");
      out.write("        form.setAttribute('action', '/TakeTest/Result');\n");
      out.write("        \n");
      out.write("        const answersInput = document.createElement('input');\n");
      out.write("        answersInput.setAttribute('type', 'hidden');\n");
      out.write("        answersInput.setAttribute('name', 'answers');\n");
      out.write("        answersInput.setAttribute('value', answersString);\n");
      out.write("        \n");
      out.write("        const switches = document.createElement('input');\n");
      out.write("        switches.setAttribute('type', 'hidden');\n");
      out.write("        switches.setAttribute('name', 'tab_switch');\n");
      out.write("        switches.setAttribute('value', count);\n");
      out.write("        \n");
      out.write("        form.appendChild(answersInput);\n");
      out.write("        form.appendChild(switches);\n");
      out.write("        \n");
      out.write("        document.body.appendChild(form);       \n");
      out.write("        \n");
      out.write("        form.submit();\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    prevButton.addEventListener('click', () => {\n");
      out.write("      currentQuestionIndex--;\n");
      out.write("      showQuestion(currentQuestionIndex);\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    nextButton.addEventListener('click', () => {\n");
      out.write("      currentQuestionIndex++;\n");
      out.write("      showQuestion(currentQuestionIndex);\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    markForReviewButton.addEventListener('click', markForReview);\n");
      out.write("    submitButton.addEventListener('click', submitTest);\n");
      out.write("\n");
      out.write("    questionLinks.forEach((link, index) => {\n");
      out.write("      link.addEventListener('click', () => {\n");
      out.write("        currentQuestionIndex = index;\n");
      out.write("        showQuestion(currentQuestionIndex);\n");
      out.write("      });\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("  </script>\n");
      out.write("  ");
 } else response.sendRedirect("/TakeTest/userPages/userLogin.jsp"); 
      out.write("\n");
      out.write("  \n");
      out.write("  <!-- Full-screen modal -->\n");
      out.write("    <div id=\"fullscreen-modal\" class=\"modal\">\n");
      out.write("        <h2>Enter Fullscreen Mode</h2>\n");
      out.write("        <p>This test requires fullscreen mode to proceed further. Would you like to enter fullscreen mode?</p>\n");
      out.write("        <div class=\"buttons\">\n");
      out.write("            <button id=\"enter-fullscreen-button\">Yes</button>\n");
      out.write("            <button id=\"back-button\">No (Go Back)</button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
