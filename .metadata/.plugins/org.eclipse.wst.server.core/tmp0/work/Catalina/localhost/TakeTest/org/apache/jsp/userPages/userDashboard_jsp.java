/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-09-25 13:36:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.userPages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import java.lang.*;
import dao.Test;

public final class userDashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.lang");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("dao.Test");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>User Dashboard</title>\n");
      out.write("<style>\n");
      out.write("body {\n");
      out.write("	font-family: Arial, sans-serif;\n");
      out.write("	margin: 0;\n");
      out.write("	padding: 0;\n");
      out.write("	background-color: #f2f2f2;\n");
      out.write("	background-color: #ffffff;\n");
      out.write("}\n");
      out.write("\n");
      out.write("header {\n");
      out.write("	background-color: #333;\n");
      out.write("	color: #fff;\n");
      out.write("	padding: 10px 20px;\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: space-between;\n");
      out.write("	align-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("header h1 {\n");
      out.write("	margin: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".header-buttons {\n");
      out.write("	display: flex;\n");
      out.write("	align-items: center;\n");
      out.write("	justify-content: flex-end;\n");
      out.write("	flex-grow: 1;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#displaymsg{\n");
      out.write("	font-size: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".header-buttons a {\n");
      out.write("	color: #fff;\n");
      out.write("	text-decoration: none;\n");
      out.write("	padding: 5px 10px;\n");
      out.write("	margin-left: 10px;\n");
      out.write("	border: 1px solid #fff;\n");
      out.write("	border-radius: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".header-buttons a:hover {\n");
      out.write("	background-color: #6643b5;\n");
      out.write("	color: #333;\n");
      out.write("	border: 1px solid #6643b5;\n");
      out.write("	border-radius: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container {\n");
      out.write("	background-color: lightgray;\n");
      out.write("	width: 80vw;\n");
      out.write("	margin: 80px auto 20px;\n");
      out.write("	padding: 20px;\n");
      out.write("	background-color: #f2f2f2;\n");
      out.write("	border-radius: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("table {\n");
      out.write("	width: 100%;\n");
      out.write("	border-collapse: collapse;\n");
      out.write("}\n");
      out.write("\n");
      out.write("th, td {\n");
      out.write("	border: 1px solid #ddd;\n");
      out.write("	border: 1px solid darkgray;\n");
      out.write("	padding: 8px;\n");
      out.write("	text-align: left;\n");
      out.write("}\n");
      out.write("\n");
      out.write("th {\n");
      out.write("	background-color: #333;\n");
      out.write("	color: #fff;\n");
      out.write("}\n");
      out.write("\n");
      out.write("tr:nth-child(even) {\n");
      out.write("	background-color: #f2f2f2;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".btn {\n");
      out.write("	padding: 6px 10px;\n");
      out.write("	background-color: #8080ff;\n");
      out.write("	color: black;\n");
      out.write("	border: none;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".logout-btn {\n");
      out.write("	padding: 6px 10px;\n");
      out.write("	background-color: #8080ff;\n");
      out.write("	color: #fff;\n");
      out.write("	border: none;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".btn:hover {\n");
      out.write("	background-color: #6643b5;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".btn:disabled {\n");
      out.write("	cursor: none !important;\n");
      out.write("	opacity: 0.6;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".modal {\n");
      out.write("	display: none;\n");
      out.write("	position: fixed;\n");
      out.write("	z-index: 1;\n");
      out.write("	left: 0;\n");
      out.write("	top: 0;\n");
      out.write("	width: 100%;\n");
      out.write("	height: 100%;\n");
      out.write("	overflow: auto;\n");
      out.write("	background-color: rgba(0, 0, 0, 0.4);\n");
      out.write("	backdrop-filter: blur(5px);\n");
      out.write("	-webkit-backdrop-filter: blur(5px);\n");
      out.write("	padding-top: 60px; /* Space for close button */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".modal-content {\n");
      out.write("	background-color: #fefefe;\n");
      out.write("	margin: 10% auto;\n");
      out.write("	padding: 20px;\n");
      out.write("	border: 1px solid #888;\n");
      out.write("	width: 50%;\n");
      out.write("    border-radius: 10px; /* Rounded corners */\n");
      out.write("    box-shadow: 0 0 10px rgba(0,0,0,0.3); /* Box shadow */\n");
      out.write("    max-width: 600px; /* Max width */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".close-button {\n");
      out.write("	color: #aaa;\n");
      out.write("	float: right;\n");
      out.write("	font-size: 28px;\n");
      out.write("	font-weight: bold;\n");
      out.write("	cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".close-button:hover, .close-button:focus {\n");
      out.write("	color: black;\n");
      out.write("	text-decoration: none;\n");
      out.write("	cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#testInstructionsList {\n");
      out.write("            margin-bottom: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	");

	HttpSession session2 = request.getSession(false);
	if (session2 != null && session2.getAttribute("user_id") != null) {
		int user_id = (int) session2.getAttribute("user_id");
		String name = (String) session2.getAttribute("name");
		ArrayList<Test> tests = (ArrayList<Test>) request.getAttribute("tests");
		ArrayList<String> allTopics = (ArrayList<String>) request.getAttribute("allTopics");
		ArrayList<String> allLang = (ArrayList<String>) request.getAttribute("allLang");
	
      out.write("\n");
      out.write("\n");
      out.write("	<header>\n");
      out.write("		<h1>\n");
      out.write("			Welcome,\n");
      out.write("			");
      out.print(name);
      out.write("!\n");
      out.write("		</h1>\n");
      out.write("		<div class=\"header-buttons\">\n");
      out.write("		\n");
      out.write("			<a href=\"/TakeTest/UserProfile\"> My Profile</a> \n");
      out.write("			<a href=\"/TakeTest/Logout\" onclick=\"return confirmLogout();\"\n");
      out.write("				class=\"logout-btn\">Logout</a>\n");
      out.write("		</div>\n");
      out.write("	</header>\n");
      out.write("\n");
      out.write("	<div class=\"container\">\n");
      out.write("		<h2>Take your Test</h2>\n");
      out.write("		\n");
      out.write("		<div style=\"margin-bottom: 10px;\">\n");
      out.write("		<form action=\"/TakeTest/FilterTest\" method=\"post\">\n");
      out.write("	\n");
      out.write("            <input type=\"hidden\" id=\"person\" name=\"person\" value=\"user\" >\n");
      out.write("			<label for=\"languageSelect\">Select Language:</label> <select id=\"languageSelect\" name=\"languageSelect\">\n");
      out.write("			<option value=\"all\" selected>All</option>\n");
      out.write("			");
 
				for(String lang: allLang){
			
      out.write("\n");
      out.write("				<option value = \"");
      out.print( lang);
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print( lang);
      out.write("  </option>\n");
      out.write("			");

				}
			
      out.write("\n");
      out.write("			\n");
      out.write("			</select> <label for=\"topicSelect\" style=\"margin-left: 10px;\">Select Topic:</label> <select id=\"topicSelect\" name=\"topicSelect\">\n");
      out.write("			<option value=\"all\" selected>All</option>\n");
      out.write("			\n");
      out.write("			");
 
				for(String topic: allTopics){
			
      out.write("\n");
      out.write("				<option value = \"");
      out.print( topic);
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print( topic);
      out.write("  </option>\n");
      out.write("			");

				}
			
      out.write("\n");
      out.write("			</select>\n");
      out.write("			<label for=\"DifficultyLevel\" style=\"margin-left: 10px;\">Select Difficulty Level:</label> <select id=\"DifficultyLevel\" name=\"DifficultyLevel\">\n");
      out.write("			<option value=\"all\" selected>All</option>\n");
      out.write("			<option value = \"easy\"> Easy </option>\n");
      out.write("			<option value = \"medium\"> Medium  </option>\n");
      out.write("			<option value = \"hard\"> Hard </option>\n");
      out.write("			</select>\n");
      out.write("\n");
      out.write("			<button class=\"btn\" onclick=\"searchTests()\" style=\"margin-left: 15px;\">Search</button>\n");
      out.write("			</form>\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		");

		if (tests.size() != 0) {
		
      out.write("\n");
      out.write("		\n");
      out.write("		<table>\n");
      out.write("			<tr>\n");
      out.write("				<th>S. No</th>\n");
      out.write("				<th>Tag</th>\n");
      out.write("				<th>No of Questions</th>\n");
      out.write("				<th>Language</th>\n");
      out.write("				<th>Topic</th>\n");
      out.write("				<th>Difficulty Level</th>\n");
      out.write("				<th>Action</th>\n");
      out.write("			</tr>\n");
      out.write("			");

			int serialNumber = 1;
			for (Test test : tests) {
			
      out.write("\n");
      out.write("			<tr>\n");
      out.write("				<td>");
      out.print(serialNumber++);
      out.write("</td>\n");
      out.write("				<td>");
      out.print(test.getTestTag());
      out.write("</td>\n");
      out.write("				<td>");
      out.print(test.getNoOfQuestions());
      out.write("</td>\n");
      out.write("				<td>");
      out.print(test.getLang());
      out.write("</td>\n");
      out.write("				<td>");
      out.print(test.getTopic());
      out.write("</td>\n");
      out.write("				<td>");
      out.print(test.getLevel() );
      out.write("</td>\n");
      out.write("				<td>\n");
      out.write("					<button class=\"btn\"\n");
      out.write("						onclick=\"showTestInstructions(");
      out.print(test.getTestId());
      out.write(',');
      out.write(' ');
      out.print(test.getNoOfQuestions());
      out.write(")\">Take\n");
      out.write("						Test</button>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("			");

			}
			
      out.write("\n");
      out.write("		</table>\n");
      out.write("		");

		} else {
		
      out.write("\n");
      out.write("\n");
      out.write("		<p id = \"displaymsg\">No tests available.</p>\n");
      out.write("\n");
      out.write("		");

		}
		
      out.write("\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	");

	} else{
	response.sendRedirect("/TakeTest/userPages/userLogin.jsp");
	}
	
      out.write("\n");
      out.write("\n");
      out.write("	<div id=\"testInstructionsModal\" class=\"modal\">\n");
      out.write("		<div class=\"modal-content\">\n");
      out.write("			<span class=\"close-button\" onclick=\"closeTestInstructionsModal()\">&times;</span>\n");
      out.write("			<h2 style=\"padding-left: 15px;\" > Test Instructions</h2>\n");
      out.write("			<ul id=\"testInstructionsList\"></ul>\n");
      out.write("			<label> <input type=\"checkbox\"\n");
      out.write("				id=\"termsAndConditionsCheckbox\"> I have read and agreed with\n");
      out.write("				the terms and conditions provided.\n");
      out.write("			</label>\n");
      out.write("			<button class=\"btn\" id=\"takeTestButton\" disabled>Take Test</button>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<script>\n");
      out.write("\n");
      out.write("   \n");
      out.write("    function generateTestInstructions() {\n");
      out.write("        const instructions = [\n");
      out.write("            \"You must maintain a professional and ethical conduct throughout the test.\",\n");
      out.write("        	\"Avoid any external aids or resources while taking the test to maintain integrity.\",\n");
      out.write("        	\"Double-check your answers before submitting to ensure accuracy.\",\n");
      out.write("            \"Please ensure that you grant access to your webcam for the test.\",\n");
      out.write("            \"You are required to take the test in fullscreen mode.\",\n");
      out.write("            \"Excessive switching between tabs during the test will result in failure.\",\n");
      out.write("			\"Notify the administrator immediately if you encounter any technical issues.\",\n");
      out.write("			\"Double-check your answers before submitting to ensure accuracy.\",\n");
      out.write("			\"Respect the confidentiality and security of the test content.\"\n");
      out.write("        ];\n");
      out.write("        return instructions;\n");
      out.write("    }   \n");
      out.write("   \n");
      out.write("    function showTestInstructions(testId, quesNum) {\n");
      out.write("\n");
      out.write("    	const testInstructions = generateTestInstructions();\n");
      out.write("\n");
      out.write("        const modal = document.getElementById(\"testInstructionsModal\");\n");
      out.write("        const instructionsList = document.getElementById(\"testInstructionsList\");\n");
      out.write("        instructionsList.innerHTML = \"\";\n");
      out.write("\n");
      out.write("        testInstructions.forEach(instruction => {\n");
      out.write("            const li = document.createElement(\"li\");\n");
      out.write("            li.textContent = instruction;\n");
      out.write("            instructionsList.appendChild(li);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        modal.style.display = \"block\";\n");
      out.write("\n");
      out.write("        const termsCheckbox = document.getElementById(\"termsAndConditionsCheckbox\");\n");
      out.write("        const takeTestButton = document.getElementById(\"takeTestButton\");\n");
      out.write("\n");
      out.write("        termsCheckbox.addEventListener(\"change\", () => {\n");
      out.write("            takeTestButton.disabled = !termsCheckbox.checked;\n");
      out.write("        });\n");
      out.write("        \n");
      out.write("        document.getElementById(\"takeTestButton\").addEventListener(\"click\", ()=>{\n");
      out.write("        	document.requestFullscreen()\n");
      out.write("        	.then(()=>{ startTest(testId, quesNum) })\n");
      out.write("        	.catch((e) => console.log(e));\n");
      out.write("        })\n");
      out.write("\n");
      out.write("       	takeTestButton.addEventListener(\"click\", () => {\n");
      out.write("            startTest(testId, quesNum);\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("   \n");
      out.write("    //-----------------------------------------------------------------------------------\n");
      out.write("\n");
      out.write("    function closeTestInstructionsModal() {\n");
      out.write("        document.getElementById(\"testInstructionsModal\").style.display = \"none\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function startTest(testId, quesNum) {\n");
      out.write("        window.location.href = \"/TakeTest/TestLive?test_id=\" + testId + \"&ques_num=\" + quesNum;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function confirmLogout() {\n");
      out.write("        return confirm(\"Do you want to log out?\");\n");
      out.write("    }\n");
      out.write("	\n");
      out.write("	document.addEventListener(\"dblclick\", ()=>{\n");
      out.write("		document.documentElement.requestFullscreen()\n");
      out.write("        .then(() => {\n");
      out.write("            console.log(\"Full-screen mode enabled.\");\n");
      out.write("        })\n");
      out.write("        .catch((e) => console.log(\"Error enabling full-screen mode:\", e));\n");
      out.write("	})\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
