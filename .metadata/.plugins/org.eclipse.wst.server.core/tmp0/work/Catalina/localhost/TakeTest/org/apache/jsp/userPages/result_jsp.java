/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-09-25 13:49:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.userPages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class result_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\" />\n");
      out.write("<title>Test Result</title>\n");
      out.write("<style>\n");
      out.write("body {\n");
      out.write("	font-family: Arial, sans-serif;\n");
      out.write("	margin: 0;\n");
      out.write("	padding: 0;\n");
      out.write("	background-color: lightgray;\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: center;\n");
      out.write("	align-items: center;\n");
      out.write("	height: 100vh;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container {\n");
      out.write("	display: flex;\n");
      out.write("	background-color: #fff;\n");
      out.write("	padding: 40px;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n");
      out.write("	width: 80%;\n");
      out.write("	max-width: 800px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".left-section {\n");
      out.write("	flex: 1;\n");
      out.write("	padding: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".right-section {\n");
      out.write("	flex: 1;\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: center;\n");
      out.write("	align-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-card {\n");
      out.write("	text-align: center;\n");
      out.write("	margin-bottom: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-card h1 {\n");
      out.write("	margin-top: 0;\n");
      out.write("	color: #333;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-card h2 {\n");
      out.write("	margin-top: 0;\n");
      out.write("	color: #333;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-graphic {\n");
      out.write("	position: relative;\n");
      out.write("	width: 150px;\n");
      out.write("	height: 150px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-graphic-inner {\n");
      out.write("	position: absolute;\n");
      out.write("	top: 50%;\n");
      out.write("	left: 50%;\n");
      out.write("	transform: translate(-50%, -50%);\n");
      out.write("	color: white;\n");
      out.write("	padding: 20px;\n");
      out.write("	border-radius: 50%;\n");
      out.write("	width: 100px;\n");
      out.write("	height: 100px;\n");
      out.write("	display: flex;\n");
      out.write("	flex-direction: column;\n");
      out.write("	justify-content: center;\n");
      out.write("	align-items: center;\n");
      out.write("	font-size: 35px;\n");
      out.write("	font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-graphic-inner.passed {\n");
      out.write("	background-color: green;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-graphic-inner.failed {\n");
      out.write("	background-color: #8080ff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-graphic-circle {\n");
      out.write("	position: absolute;\n");
      out.write("	top: 0;\n");
      out.write("	left: 0;\n");
      out.write("	width: 100%;\n");
      out.write("	height: 100%;\n");
      out.write("	border-radius: 50%;\n");
      out.write("	border: 10px solid #ccc;\n");
      out.write("	box-sizing: border-box;\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: center;\n");
      out.write("	align-items: center;\n");
      out.write("	overflow: hidden;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".score-graphic-circle:before {\n");
      out.write("	content: \"\";\n");
      out.write("	position: absolute;\n");
      out.write("	top: 0;\n");
      out.write("	left: 0;\n");
      out.write("	width: 50%;\n");
      out.write("	height: 100%;\n");
      out.write("	background-color: #007bff;\n");
      out.write("	border-radius: 50% 0 0 50%;\n");
      out.write("	transform-origin: right center;\n");
      out.write("	transform: rotate(180deg);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".actions {\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: center;\n");
      out.write("	margin-top: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".actions a {\n");
      out.write("	display: block;\n");
      out.write("	margin: 0 10px;\n");
      out.write("	padding: 10px 20px;\n");
      out.write("	background-color: #6643b5;\n");
      out.write("	color: white;\n");
      out.write("	text-align: center;\n");
      out.write("	text-decoration: none;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	transition: font-size 0.5s;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".actions a.logout {\n");
      out.write("	background-color: #8080ff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".actions a:hover {\n");
      out.write("	font-size: 18px;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	");

	HttpSession session2 = request.getSession(false);
	if (session2 != null && session2.getAttribute("user_id") != null) {
		String name = (String) session2.getAttribute("name");
		String test = ((String) session2.getAttribute("test_tag")).toUpperCase();
		int score = (int) request.getAttribute("score");
		int tab_switch = (int) request.getAttribute("tab_switches");
		int total = (int) request.getAttribute("total");
		int passMarks = (int) request.getAttribute("pass_marks");
		int percentage = (score * 100) / total;
		String status = (String) request.getAttribute("status");
		String lang = (String) request.getAttribute("lang");
		String topic = (String) request.getAttribute("topic");
	
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	<div class=\"container\">\n");
      out.write("\n");
      out.write("		<div class=\"left-section\">\n");
      out.write("			<div class=\"score-card\">\n");
      out.write("				<h1>You ");
      out.print( status );
      out.write("ed!</h1>\n");
      out.write("				<h2>Test: ");
      out.print( test );
      out.write(" </h2>\n");
      out.write("				<p>Status: ");
      out.print( status );
      out.write("</p>\n");
      out.write("				<p>Test Lang: ");
      out.print( lang );
      out.write("</p>\n");
      out.write("				<p>Test Topic: ");
      out.print( topic );
      out.write("</p>\n");
      out.write("				<p>\n");
      out.write("					Test ended at: <span id=\"current-time\"></span>\n");
      out.write("				</p>\n");
      out.write("				<b><p class=\"tab-switches\">\n");
      out.write("						Tab Switches:\n");
      out.write("						");
      out.print(tab_switch);
      out.write("</p></b>\n");
      out.write("				<div class=\"actions\">\n");
      out.write("					<a href=\"/TakeTest/UserDashboard\" onclick=\"return goToDashboard()\">Test\n");
      out.write("						Options</a> <a href=\"./Logout\" onclick=\"return confirmLogout();\"\n");
      out.write("						class=\"logout\">User Logout</a> <a href=\"#\" onclick=\"printResults()\">Print\n");
      out.write("						Results</a>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("		<div class=\"right-section\">\n");
      out.write("			<div class=\"score-graphic\">\n");
      out.write("				<div class=\"score-graphic-circle\"></div>\n");
      out.write("				<div class=\"score-graphic-inner ");
      out.print( (status.equals("pass")) ? "passed" : "failed" );
      out.write("\">\n");
      out.write("					<span>");
      out.print(percentage);
      out.write("%</span>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<form name=\"submit-to-google-sheet\">\n");
      out.write("		<input type=\"hidden\" name=\"Name\" value=\"");
      out.print(name);
      out.write("\" required> <input\n");
      out.write("			type=\"hidden\" name=\"TestTag\" value=\"");
      out.print(test);
      out.write("\" required> <input\n");
      out.write("			type=\"hidden\" name=\"MaxMarks\" value=\"");
      out.print(total);
      out.write("\" required> <input\n");
      out.write("			type=\"hidden\" name=\"passMarks\" value=\"");
      out.print(passMarks);
      out.write("\" required>\n");
      out.write("		<input type=\"hidden\" name=\"MarksScored\" value=\"");
      out.print(score);
      out.write("\" required>\n");
      out.write("		<input type=\"hidden\" name=\"Percentage\" value=\"");
      out.print(percentage);
      out.write("\"\n");
      out.write("			required> <input type=\"hidden\" name=\"TabSwitches\"\n");
      out.write("			value=\"");
      out.print(tab_switch);
      out.write("\" required>\n");
      out.write("	</form>\n");
      out.write("\n");
      out.write("	<script>\n");
      out.write("  \n");
      out.write("	\n");
      out.write("	const scriptURL = 'https://script.google.com/macros/s/AKfycbwHnQvkEQS3wsGf0rWW8ML2CyPtBDqaxWMMKRRjjSOPBbHPL1sL4y_q4tHi1igRUCJG/exec';\n");
      out.write("  const form = document.forms['submit-to-google-sheet'];\n");
      out.write("  document.addEventListener('DOMContentLoaded', (e) => {\n");
      out.write("	    e.preventDefault();\n");
      out.write("	    fetch(scriptURL, { method: 'POST', body: new FormData(form) })\n");
      out.write("	      .then(response => console.log('Success!', response))\n");
      out.write("	      .catch(error => console.error('Error!', error.message));\n");
      out.write("\n");
      out.write("  });	\n");
      out.write("  \n");
      out.write("  \n");
      out.write("    function confirmLogout() {\n");
      out.write("      return confirm(\"Do you want to log out?\");\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function printResults() {\n");
      out.write("      window.print();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function goToDashboard() {\n");
      out.write("      if (confirm(\"Check other test options?\")) return true;\n");
      out.write("      else return false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Add this script to display the current time\n");
      out.write("    var currentTime = document.getElementById(\"current-time\");\n");
      out.write("    var date = new Date();\n");
      out.write("    var hours = date.getHours();\n");
      out.write("    var minutes = date.getMinutes();\n");
      out.write("    var seconds = date.getSeconds();\n");
      out.write("    var IST = \"IST\";\n");
      out.write("    currentTime.innerHTML = hours + \":\" + minutes + \":\" + seconds + \" \" + IST;\n");
      out.write("  </script>\n");
      out.write("\n");
      out.write("	");

	} else
	response.sendRedirect("/TakeTest/userPages/userLogin.jsp");
	
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
