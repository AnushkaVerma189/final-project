/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-09-25 13:23:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.adminPages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class addQuestions_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Add Questions</title>\n");
      out.write("<style>\n");
      out.write("    body {\n");
      out.write("        font-family: Arial, sans-serif;\n");
      out.write("        margin: 0;\n");
      out.write("        padding: 0;\n");
      out.write("        background-color: lightgray;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .container {\n");
      out.write("        max-width: 600px;\n");
      out.write("        margin: 40px auto;\n");
      out.write("        background-color: #fff;\n");
      out.write("        padding: 20px;\n");
      out.write("        border-radius: 5px;\n");
      out.write("        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    h2 {\n");
      out.write("        margin-top: 0;\n");
      out.write("        text-align: center;\n");
      out.write("        color: #333;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .error {\n");
      out.write("        color: red;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .questionForm {\n");
      out.write("        margin-top: 40px;\n");
      out.write("        display: none; /* Hide all question forms by default */\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .questionForm.active {\n");
      out.write("        display: block; /* Display only the active question form */\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    label {\n");
      out.write("        display: block;\n");
      out.write("        margin-top: 10px;\n");
      out.write("        color: #555;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    input[type=\"text\"],\n");
      out.write("    input[type=\"number\"] {\n");
      out.write("        width: calc(100% - 20px);\n");
      out.write("        padding: 8px;\n");
      out.write("        margin-top: 5px;\n");
      out.write("        border: 1px solid #ccc;\n");
      out.write("        border-radius: 5px;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    button {\n");
      out.write("        margin-top: 20px;\n");
      out.write("        padding: 10px 20px;\n");
      out.write("        background-color: #8080ff;\n");
      out.write("        color: white;\n");
      out.write("        border: none;\n");
      out.write("        border-radius: 5px;\n");
      out.write("        cursor: pointer;\n");
      out.write("        transition: font-size 0.5s;\n");
      out.write("        \n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    button.goBack {\n");
      out.write("        background-color: #6643b5;\n");
      out.write("    }\n");
      out.write("    button:hover {\n");
      out.write("        font-size: 18px;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .hidden {\n");
      out.write("        display: none;\n");
      out.write("    }\n");
      out.write("    textarea {\n");
      out.write("    width: calc(100% - 20px);\n");
      out.write("    padding: 8px;\n");
      out.write("    margin-top: 5px;\n");
      out.write("    border: 1px solid #ccc;\n");
      out.write("    border-radius: 5px;\n");
      out.write("    resize: vertical; /* Allow vertical resizing */\n");
      out.write("    min-height: 25px; /* Set a minimum height for the text field */\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\n");
      out.write("    ");

        HttpSession session2 = request.getSession(false);
        if (session2 != null && session2.getAttribute("username") != null) {
    
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <h2>Add Questions</h2>\n");
      out.write("        \n");
      out.write("        ");
 
            String error = (String) request.getAttribute("error");
            if (error != null && error.equals("invalid passing marks")) {
        
      out.write("\n");
      out.write("           <p class=\"error\">Invalid passing marks entered. Try again</p>\n");
      out.write("        ");

            }
        
      out.write("\n");
      out.write("        \n");
      out.write("        <form id=\"questionForm\" action=\"/TakeTest/AddQuestion\" method=\"post\">\n");
      out.write("            ");
 
                String questions = (String) request.getAttribute("ques");
                String test_id = (String) request.getAttribute("testId");
                if (questions != null && test_id != null) {
                    int numberOfQuestions = Integer.parseInt(questions);
                    
                    for (int i = 1; i <= numberOfQuestions; i++) {
            
      out.write("\n");
      out.write("                <div class=\"questionForm ");
      out.print( i == 1 ? "active" : "" );
      out.write("\">\n");
      out.write("                    <h3>Question ");
      out.print( i  );
      out.write("</h3>\n");
      out.write("                    <label for=\"question");
      out.print( i );
      out.write("\">Question statement:</label>\n");
      out.write("					<textarea id=\"question");
      out.print( i );
      out.write("\" name=\"ques_text");
      out.print( i );
      out.write("\" required></textarea>\n");
      out.write("					\n");
      out.write("					<label for=\"option1");
      out.print( i );
      out.write("\">Option 1:</label>\n");
      out.write("					<textarea id=\"option1");
      out.print( i );
      out.write("\" name=\"option1");
      out.print( i );
      out.write("\" required></textarea>\n");
      out.write("					\n");
      out.write("                    <label for=\"option2");
      out.print( i );
      out.write("\">Option 2:</label>\n");
      out.write("                    <textarea id=\"option2");
      out.print( i );
      out.write("\" name=\"option2");
      out.print( i );
      out.write("\" required></textarea>\n");
      out.write("                    \n");
      out.write("                    <label for=\"option3");
      out.print( i );
      out.write("\">Option 3:</label>\n");
      out.write("                    <textarea id=\"option3");
      out.print( i );
      out.write("\" name=\"option3");
      out.print( i );
      out.write("\" required></textarea>\n");
      out.write("                    \n");
      out.write("                    <label for=\"option4");
      out.print( i );
      out.write("\">Option 4:</label>\n");
      out.write("                    <textarea id=\"option4");
      out.print( i );
      out.write("\" name=\"option4");
      out.print( i );
      out.write("\" required></textarea>\n");
      out.write("                    \n");
      out.write("                    <label for=\"correctAnswer");
      out.print( i );
      out.write("\">Correct Answer:</label>\n");
      out.write("                    <input type=\"number\" id=\"correctAnswer");
      out.print( i );
      out.write("\" name=\"correctAnswer");
      out.print( i );
      out.write("\" required min=\"1\" max=\"4\">\n");
      out.write("                </div>\n");
      out.write("            ");
 
                    }
                } else response.sendRedirect("/TakeTest/error.jsp");
            
      out.write("\n");
      out.write("            <input type =\"hidden\" name=\"num_ques\" value = ");
      out.print( questions );
      out.write("> \n");
      out.write("            <input type=\"hidden\" name=\"testId\" value=\"");
      out.print( test_id );
      out.write("\">\n");
      out.write("            <button id=\"prevButton\" type=\"button\" class=\"hidden\">Previous</button>\n");
      out.write("            <button id=\"nextButton\" type=\"button\">Next</button>\n");
      out.write("            <button type=\"submit\" class=\"hidden\" id=\"submitButton\">Submit Questions</button>\n");
      out.write("            <b><p id=\"errorMsg\" class=\"error hidden\" style=\"color: black;\">Make sure you have filled all the columns properly.</p></b>\n");
      out.write("        </form>				\n");
      out.write("		<button class=\"goBack\" id=\"deleteTestButton\" data-test-id=\"");
      out.print( test_id );
      out.write("\">Go Back</button>\n");
      out.write("                       \n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("<script>\n");
      out.write("    var currentQuestion = 0;\n");
      out.write("    var questionForms = document.querySelectorAll('.questionForm');\n");
      out.write("    var nextButton = document.getElementById('nextButton');\n");
      out.write("    var prevButton = document.getElementById('prevButton');\n");
      out.write("    var submitButton = document.getElementById('submitButton');\n");
      out.write("    var goBackButton = document.getElementById('goBackButton');\n");
      out.write("    var errorMsg = document.getElementById('errorMsg');\n");
      out.write("    \n");
      out.write("    // Function to show the current question and handle button states\n");
      out.write("    function showQuestion() {\n");
      out.write("        questionForms.forEach(function(form, index) {\n");
      out.write("            if (index === currentQuestion) {\n");
      out.write("                form.classList.add('active');\n");
      out.write("            } else {\n");
      out.write("                form.classList.remove('active');\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("        if (currentQuestion === 0) {\n");
      out.write("            prevButton.classList.add('hidden');\n");
      out.write("        } else {\n");
      out.write("            prevButton.classList.remove('hidden');\n");
      out.write("        }\n");
      out.write("        if (currentQuestion === questionForms.length - 1) {\n");
      out.write("            submitButton.classList.remove('hidden');\n");
      out.write("            nextButton.classList.add('hidden');\n");
      out.write("        } else {\n");
      out.write("            submitButton.classList.add('hidden');\n");
      out.write("            nextButton.classList.remove('hidden');\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Initial setup\n");
      out.write("    showQuestion();\n");
      out.write("    \n");
      out.write(" // Event listener for the Next button\n");
      out.write("    nextButton.addEventListener('click', function() {\n");
      out.write("        var inputs = document.querySelectorAll('.questionForm.active input[type=\"text\"], .questionForm.active input[type=\"number\"]');\n");
      out.write("        var isValid = true;\n");
      out.write("        inputs.forEach(function(input) {\n");
      out.write("            if (!input.value.trim()) {\n");
      out.write("                isValid = false;\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("        var correctAnswerInput = document.getElementById('correctAnswer' + (currentQuestion + 1));\n");
      out.write("        if (correctAnswerInput) {\n");
      out.write("            var correctAnswer = parseInt(correctAnswerInput.value);\n");
      out.write("            if (isNaN(correctAnswer) || correctAnswer < 1 || correctAnswer > 4) {\n");
      out.write("                isValid = false;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        if (isValid) {\n");
      out.write("            currentQuestion++;\n");
      out.write("            showQuestion();\n");
      out.write("            errorMsg.classList.add('hidden'); // Hide error message on next click\n");
      out.write("        } else {\n");
      out.write("            errorMsg.textContent = \"Enter the valid correct option.\";\n");
      out.write("            errorMsg.classList.remove('hidden');\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    var formInputs = document.querySelectorAll('.questionForm input[type=\"text\"], .questionForm input[type=\"number\"]');\n");
      out.write("    formInputs.forEach(function(input) {\n");
      out.write("        input.addEventListener('input', function() {\n");
      out.write("            errorMsg.classList.add('hidden');\n");
      out.write("        });\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    prevButton.addEventListener('click', function() {\n");
      out.write("        currentQuestion--;\n");
      out.write("        showQuestion();\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    submitButton.addEventListener('click', function() {\n");
      out.write("        var inputs = document.querySelectorAll('.questionForm.active input[type=\"text\"], .questionForm.active input[type=\"number\"]');\n");
      out.write("        var isValid = true;\n");
      out.write("        inputs.forEach(function(input) {\n");
      out.write("            if (!input.value.trim()) {\n");
      out.write("                isValid = false;\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("        \n");
      out.write("        var correctAnswerInput = document.getElementById('correctAnswer' + (currentQuestion + 1));\n");
      out.write("        if (correctAnswerInput) {\n");
      out.write("            var correctAnswer = parseInt(correctAnswerInput.value);\n");
      out.write("            if (isNaN(correctAnswer) || correctAnswer < 1 || correctAnswer > 4) {\n");
      out.write("                isValid = false;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        if (!isValid) {\n");
      out.write("            errorMsg.textContent = \"Invalid format on question number \" + (currentQuestion + 1);\n");
      out.write("            errorMsg.classList.remove('hidden');\n");
      out.write("        } else {\n");
      out.write("            errorMsg.classList.add('hidden');\n");
      out.write("             document.getElementById('questionForm').submit();\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    document.querySelectorAll('.goBack').forEach(item => {\n");
      out.write("        item.addEventListener('click', event => {\n");
      out.write("            const testId = event.target.dataset.testId;\n");
      out.write("            if (confirmGoBack()) {\n");
      out.write("                window.location.href = \"/TakeTest/DeleteTest?what=test&test_id=\" + testId;\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    function confirmGoBack() {\n");
      out.write("        return confirm(\"Current test will not be added. Are you sure you want to go back?\");\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("formInputs.forEach(function(input) {\n");
      out.write("    if (input.tagName.toLowerCase() === 'textarea') {\n");
      out.write("        input.addEventListener('keydown', function(event) {\n");
      out.write("            if (event.key === \"Enter\") {\n");
      out.write("                event.preventDefault(); \n");
      out.write("                var cursorPosition = input.selectionStart; \n");
      out.write("                var value = input.value;\n");
      out.write("                var newValue = value.substring(0, cursorPosition) + \"\\n\" + value.substring(cursorPosition);\n");
      out.write("                input.value = newValue; \n");
      out.write("                input.selectionStart = input.selectionEnd = cursorPosition + 1; \n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("       ");

        } else response.sendRedirect("/TakeTest/adminPages/adminLogin.jsp");
    
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
