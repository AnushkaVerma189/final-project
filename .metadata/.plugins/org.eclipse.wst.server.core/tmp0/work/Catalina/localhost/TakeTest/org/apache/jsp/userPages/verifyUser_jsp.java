/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-09-18 09:58:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.userPages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class verifyUser_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title> User Verification </title>\n");
      out.write("<style>\n");
      out.write("\n");
      out.write("* {\n");
      out.write("    padding: 0;\n");
      out.write("    margin: 0;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("}\n");
      out.write("\n");
      out.write("body {\n");
      out.write("    font-family: Arial, sans-serif;\n");
      out.write("    background-color: #d3d3d3; /* Grey background color */\n");
      out.write("    height: 100vh;\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: center;\n");
      out.write("    align-items: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container {\n");
      out.write("    width: 40%;\n");
      out.write("    padding: 30px;\n");
      out.write("    text-align: center;\n");
      out.write("    border-radius: 15px;\n");
      out.write("    border: white;\n");
      out.write("    background-color: #ffffff; /* White background */\n");
      out.write("    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); /* Box shadow */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container h2 {\n");
      out.write("    margin-bottom: 20px;\n");
      out.write("    font-size: 2rem;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container p {\n");
      out.write("    margin-bottom: 20px;\n");
      out.write("    font-size: 18px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".code-container {\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: center;\n");
      out.write("    align-items: center;\n");
      out.write("    margin-top: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".code {\n");
      out.write("    height: 50px; /* Smaller input height */\n");
      out.write("    width: 50px; /* Smaller input width */\n");
      out.write("    border: none; /* No border */\n");
      out.write("    outline: none; /* Remove outline on focus */\n");
      out.write("    font-size: 1.5rem;\n");
      out.write("    text-align: center;\n");
      out.write("    background-color: #ffffff; /* White background for inputs */\n");
      out.write("    box-shadow: 0 0 5px rgba(0, 128, 0, 0.5); /* Green box shadow for valid inputs */\n");
      out.write("    margin: 5px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("input[type=\"number\"]::-webkit-inner-spin-button,\n");
      out.write("input[type=\"number\"]::-webkit-outer-spin-button {\n");
      out.write("    -webkit-appearance: none;\n");
      out.write("    margin: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("button {\n");
      out.write("    display: inline-block;\n");
      out.write("    padding: 10px 20px;\n");
      out.write("    margin: 10px;\n");
      out.write("    font-size: 1rem;\n");
      out.write("    border: none;\n");
      out.write("    border-radius: 5px;\n");
      out.write("    cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".button-home {\n");
      out.write("    background-color: #007bff; /* Blue background color for home button */\n");
      out.write("    color: #ffffff; /* White text color */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".button-verify {\n");
      out.write("    background-color: #28a745; /* Green background color for verify button */\n");
      out.write("    color: #ffffff; /* White text color */\n");
      out.write("}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\n");
      out.write("	");

	HttpSession session2 = request.getSession(false);
	if (session2 != null && session2.getAttribute("email") != null) {
	
      out.write("\n");
      out.write("\n");
      out.write("	<div class=\"container\">\n");
      out.write("        <h2>Verify your Account</h2>\n");
      out.write("        <p>\n");
      out.write("            We have sent a verification code to your email address. </br>\n");
      out.write("            Enter the verification code that you received.\n");
      out.write("        </p>\n");
      out.write("        <div class=\"code-container\">\n");
      out.write("        	<form action=\"/TakeTest/UserRegister\" method=\"post\" >\n");
      out.write("            <input type=\"number\" class=\"code\" name=\"digit1\" placeholder=\"0\" min=\"0\" max=\"9\" maxlength=\"1\" required>\n");
      out.write("            <input type=\"number\" class=\"code\" name=\"digit2\" placeholder=\"0\" min=\"0\" max=\"9\" maxlength=\"1\" required>\n");
      out.write("            <input type=\"number\" class=\"code\" name=\"digit3\" placeholder=\"0\" min=\"0\" max=\"9\" maxlength=\"1\" required>\n");
      out.write("            <input type=\"number\" class=\"code\" name=\"digit4\" placeholder=\"0\" min=\"0\" max=\"9\" maxlength=\"1\" required>\n");
      out.write("            <input type=\"number\" class=\"code\" name=\"digit5\" placeholder=\"0\" min=\"0\" max=\"9\" maxlength=\"1\" required>\n");
      out.write("            <input type=\"number\" class=\"code\" name=\"digit6\" placeholder=\"0\" min=\"0\" max=\"9\" maxlength=\"1\" required> <br>\n");
      out.write("    		<button class=\"button-verify\" type=\"submit\" >Verify</button>\n");
      out.write("    		\n");
      out.write("        <button class=\"button-home\" onclick=\"goToHome()\">Go to Home</button>\n");
      out.write("			</form>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    <script>\n");
      out.write("    \n");
      out.write("    const codes = document.querySelectorAll(\".code\");\n");
      out.write("    codes[0].focus();\n");
      out.write("\n");
      out.write("    codes.forEach((code, idx) => {\n");
      out.write("        code.addEventListener(\"keydown\", (e) => {\n");
      out.write("            if( e.key >= 0 && e.key <=9){\n");
      out.write("                codes[idx].value = \"\";\n");
      out.write("                setTimeout(() => codes[idx+1].focus(),10);\n");
      out.write("            }else if( e.key === \"Backspace\"){\n");
      out.write("                setTimeout(() => codes[idx-1].focus(),10);\n");
      out.write("            }\n");
      out.write("        })\n");
      out.write("    })\n");
      out.write("    \n");
      out.write("    function goToHome(){\n");
      out.write("    	if(confirm(\"Back to Home? \")) {\n");
      out.write("    		window.location.href = \"/TakeTest/userPages/userRegister.jsp\";\n");
      out.write("    	}\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    </script>\n");
      out.write("    \n");
      out.write("    ");

	} else{
	response.sendRedirect("/TakeTest/userPages/userRegister.jsp");
	}
	
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
